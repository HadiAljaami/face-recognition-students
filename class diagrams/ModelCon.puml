@startuml

class ModelConfigRepository {
  + get_config(): Config
  + update_config(id: int, data: dict): bool
  + reset_to_default(): bool
  + get_default_config(): Config
}

class ModelConfigService {
  + get_current_config(): dict
  + update_config(id: int, data: dict): bool
  + reset_to_default(): bool
  + get_default_config(): dict
  - _validate_mediapipe_params()
}

class "ModelConfigRoutes" << (R,#FF8256) Flask Routes >> {
  __All Endpoints__
  + GET /api/model-config : get_config()
  + PUT /api/model-config/<id> : update_config()
  + POST /api/model-config/reset-default : reset_to_default()
  + GET /api/model-config/default : get_default_config()
  
  __MediaPipe Integration__
  + FaceMesh Options
  + Pose Estimation
  + Alert Thresholds
}

ModelConfigService --> ModelConfigRepository : "persists\nsettings"
ModelConfigRoutes ..> ModelConfigService : "invokes"

note top of ModelConfigRoutes
  <<Flask REST API>>
  Full configuration management:
  - GET: Retrieve current config
  - PUT: Update parameters
  - POST: Reset to defaults
  - GET: Get default values
  Integrates with MediaPipe JS
end note

note right of ModelConfigService
  MediaPipe Configuration:
  - FaceMesh: maxFaces, refineLandmarks
  - Pose: complexity, smoothing
  - Alerts: thresholds, durations
  Validation for all parameters
end note

@enduml